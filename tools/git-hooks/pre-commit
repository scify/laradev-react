#!/bin/bash

# Run Gitleaks secret scanning
echo "üîí Running Gitleaks secret scan..."
if [ -f "./gitleaks" ]; then
    ./gitleaks protect --verbose --staged
    GITLEAKS_EXIT_CODE=$?
    if [ $GITLEAKS_EXIT_CODE -ne 0 ]; then
        echo "‚ùå Gitleaks found potential secrets. Commit blocked."
        echo "Please remove the secrets and try again."
        echo "If this is a false positive, you can use --no-verify flag to bypass."
        exit 1
    fi
    echo "‚úÖ No secrets detected by Gitleaks."
else
    echo "‚ö†Ô∏è  Gitleaks not found in project root. Skipping secret scan."
fi

# Store list of staged files
STAGED_PHP=$(git diff --cached --name-only --diff-filter=d | grep ".php$" || true)
STAGED_JS_TS=$(git diff --cached --name-only --diff-filter=d | grep -E "\.(js|jsx|ts|tsx)$" || true)
STAGED_SCSS=$(git diff --cached --name-only --diff-filter=d | grep -E "\.scss|\.css$" || true)

# Format PHP files
if [ -n "$STAGED_PHP" ]; then
    echo "üîç Formatting PHP files..."
    echo "$STAGED_PHP" | xargs ./vendor/bin/pint --parallel
    echo "$STAGED_PHP" | xargs git add
fi

# Format JS/TS/SCSS files
if [ -n "$STAGED_JS_TS" ]; then
    echo "üîç Formatting JS/TS/SCSS files..."
    echo "$STAGED_JS_TS" | xargs npm run format:staged
    echo "$STAGED_JS_TS" | xargs git add
fi

# Format SCSS files
if [ -n "$STAGED_SCSS" ]; then
    echo "üîç Formatting SCSS files..."
    echo "$STAGED_SCSS" | xargs npm run format:staged:styles
    echo "$STAGED_SCSS" | xargs git add
fi

exit 0
